@page "/books/view/{Id}"
@inject IBookRepository _booksRepo
@inject NavigationManager _navMan

@if(int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <ErrorMessage Message="Invalid Selection. Please try again." />
} else if (Model == null)
{
    <LoadingMessage Message="Loading Book details..." />
} else {
    <div class="row">
        <div class="col-6">
            <table class="table table-responsive">
                <tr>
                    <td><strong>Title</strong></td>
                    <td>@Model.Title</td>
                </tr>
                <tr>
                    <td><strong>Author</strong></td>
                    @if (Model.author == null)
                    {
                        <td>No Author Recorded</td>
                    } else
                    {
                        <td><a href="/authors/view/@Model.author.Id">@Model.author.Lastname, @Model.author.Firstname</a></td>
                    }
                </tr>
                <tr>
                    <td><strong>Summary</strong></td>
                    <td>@Model.Summary</td>
                </tr>
                <tr>
                    <td><strong>Published Year</strong></td>
                    <td>@Model.Year</td>
                </tr>
                <tr>
                    <td><strong>ISBN</strong></td>
                    <td>@Model.ISBN</td>
                </tr>
            </table>
        </div>
        <div class="col-4">
            @if(!string.IsNullOrWhiteSpace(Model.Image))
            @if(Model.Image.Contains("http"))
            {
                <img src="@Model.Image" style="height:300px; width:300px" />
            } else
            {
                <img src="Uploads/@Model.Image" style="height:300px; width:300px" />
            }

            <h3 class="text-center text-info">@Model.Price</h3>
        </div>
    </div>
}

<a href="/books/" class="btn btn-outline-secondary">
    <span class="oi oi-media-skip-backward">
        Back To List
    </span></a>

@code {
    [Parameter]
    public string Id { get; set; }
    private Book Model = new Book();

    protected async override Task OnInitializedAsync()
    {
        int id = int.Parse(Id);
        Model = await _booksRepo.Get(Endpoints.BooksEndpoint, id);
    }
    

}
