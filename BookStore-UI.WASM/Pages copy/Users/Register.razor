@page "/register"

@inject IAuthenticationRepository _repo
@inject NavigationManager _navMan

<h3 class="card-title">Register Now</h3>
@if (IsFailed)
{
    <ErrorMessage Message="Something went wrong with the Registration attempt." />
}
<div class="card-body">
    <EditForm Model="Model" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="email">Email Address</label>
            <InputText Id="email" class="form-control" @bind-Value="Model.EmailAddress" />
            <ValidationMessage For="@(() => Model.EmailAddress)" />
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <InputText Id="password" type="password" class="form-control" @bind-Value="Model.Password" />
            <ValidationMessage For="@(() => Model.Password)" />
        </div>
        <div class="form-group">
            <label for="confirmpassword">Confirm Password</label>
            <InputText Id="confirmpassword" type="password" class="form-control" @bind-Value="Model.ConfirmPassword" />
            <ValidationMessage For="@(() => Model.ConfirmPassword)" />
        </div>
        <button type="submit" class="btn btn-primary btn-block">Submit</button>
    </EditForm>
</div>

@code {
    private RegistrationModel Model= new RegistrationModel();
    private bool IsFailed = false;
    private async Task HandleRegistration()
    {
        var response = await _repo.Register(Model);
        if (response)
        {
            IsFailed = false;
            _navMan.NavigateTo("/");
        } else
        {
            IsFailed = true;
        }
        return; 
    }
}