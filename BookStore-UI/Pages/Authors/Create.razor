@page "/authors/create"
@attribute [Authorize(Roles="Administrator")]
@inject IAuthorRepository _authRep
@inject NavigationManager _navManager

<h3 class="card-title">Create New Author</h3>
<br/>
<hr/>
<br/>
@if (!isSuccess)
{
    <ErrorMessage Message="Something went wrong when trying to create a new author." />
}

<EditForm Model="Model" OnValidSubmit="CreateAuthor">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="firstname">First Name</label>
        <InputText @bind-Value="Model.Firstname" class="form-conrol" id="firstname" />
    </div>
    <div class="form-group">
        <label for="lastnamename">Last Name</label>
        <InputText @bind-Value="Model.Lastname" class="form-conrol" id="lastname" />
    </div>
    <div class="form-group">
        <label for="bio">Bio</label>
        <InputTextArea @bind-Value="Model.Bio" class="form-conrol" id="bio" />
    </div>
    <button class="btn btn-primary" >Create Author</button>
    <button @onclick="BackToList" class="btn btn-outline-secondary">
        <span class="oi oi-media-skip-backward"></span>
        Back To List
    </button>
</EditForm>

@code {
    private Author Model = new Author();
    private bool isSuccess = true;

    private async Task CreateAuthor()
    {
        isSuccess = await _authRep.Create(Endpoints.AuthorsEndpoint, Model);
        if (isSuccess)
        {
            BackToList();
        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/authors/");
    }
}
