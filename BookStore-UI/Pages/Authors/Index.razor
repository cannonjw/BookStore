@page "/authors/"

@inject IAuthorRepository _authRepo
@inject NavigationManager _navManager

<h3 class="card-title">Authors</h3>

@if(Model == null)
{
    <LoadingMessage Message="Loading Authors..." />
} else
{
    <AuthorizeView Roles="Administrator">
            <a href="/authors/create" class="btn btn-primary"><span class="oi oi-plus"></span>Create New Author</a>
    </AuthorizeView>

    @if (Model.Count < 1)
    {
        <ErrorMessage Message="There are no authors in the database.  Please add new authors." />
    } else
    {
        <table class="table table-responsive">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Lasst Name</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var author in Model)
                {
                    <tr>
                        <td>@author.Firstname</td>
                        <td>@author.Lastname</td>
                        <td>
                            <a href="/authors/view/@author.Id" class="btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>
                            <AuthorizeView Roles="Administrator">
                                <a href="/authors/edit/@author.Id" class="btn btn-warning">
                                    <span class="oi oi-pencil"></span>
                                </a>
                                <a href="/authors/delete/@author.Id" class="btn btn-danger">
                                    <span class="oi oi-delete"></span>
                                </a>
                                
                            </AuthorizeView>
                            
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    }
}

@code {
    private IList<Author> Model;
    protected async override Task OnInitializedAsync() 
    {
        Model = await _authRepo.Get(Endpoints.AuthorsEndpoint);
    }

}